function num_to_char(n:int<4>) : char 
{
  return n=15 ? '^' : ((n::int<8>)+'0'::int<8>)::char
}

fsm model T2C(
     in h: event,
     in e_rdy: bool,
     in tok_in: token_t,
     out r_rdy: bool,
     out tx_wr: bool,
     out tx_data: char,
     in tx_rdy: bool)
  {
  states: R1, R2, Conv, E1, E2;
  vars:
    t: token_t,
    r:int<20>,   # Double-dabble register (4 digits + 8 bits)
    z: bool,     # Display zero(s) flag
    i,j : int;
  trans:
    R1 -- h.e_rdy=1 | t:=tok_in; r_rdy:=0 -> R2,
    R2 -- h.(e_rdy=0).(t.tag=Number) | r[19:8]:=0; r[7:0]:=t.num; i:=0; r_rdy:=1 -> Conv,
    R2 -- h.(e_rdy=0).(t.tag!=Number) | r_rdy:=1 -> R1, # Ignore non-numeric tokens
  Conv -- h.i<8 | r[11:8] := r[11:8]>4?r[11:8]+3:r[11:8]; 
                  r[15:12] := r[15:12]>4?r[15:12]+3:r[15:12];
                  r[19:16] := r[19:16]>4?r[19:16]+3:r[19:16];
                  r := r<<1;
                  i := i+1 -> Conv,
  Conv -- h.(i=8) | r[7:4]:=15; j:=16; z:=0 -> E1,
    E1 -- h.j=0 -> R1,
    *E1 -- h.(j>0).(r[j+3:j]=0).(z=0).(j!=8) | j:=j-4 -> E1,  # Skip leading 0's
    E1 -- h.(j>0).(tx_rdy=1) | tx_data:=num_to_char(r[j+3:j]); tx_wr:=1 -> E2,
    E2 -- h | tx_wr:=0; j:=j-4; z:=1 -> E1;
  itrans: | r_rdy:=1; tx_wr:=0; r:=0 -> R1;
  }
