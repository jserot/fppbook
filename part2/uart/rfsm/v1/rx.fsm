# UART - RX Part

type bit = int<1>

fsm model RX<n:int> (
   # n donne la durée d'un bit (en périodes de H)
     in h: event,
     in rx: bit,
    out rxData: int<8>,
    out rxRdy: bool,
    out rxErr: bool)
  {
  states: Repos, Sync, Data, Parite, Stop ;
  vars:
    i: int<0:8>,
    k: int<0:n>,
    r: int<8>,
    p: int<1>;
  trans:
    Repos -- h.rx=0 | r:=0; k:=0; rxRdy:=0 -> Sync,
    Sync -- h.k<n/2-1 | k:=k+1 -> Sync,
    Sync -- h.k=n/2-1 | k:=0; i:=0; p:=0 -> Data,
    Data -- h.k<n-1 | k:=k+1 -> Data,
    Data -- h.(k=n-1).(i<8) | r[i]:=rx; p:=p^rx; k:=0; i:=i+1 -> Data,
    Data -- h.(k=n-1).(i=8) | p:=p^rx; k:=0 -> Parite,
    Parite -- h.k<n-1 | k:=k+1 -> Parite,
    Parite -- h.(k=n-1) | k:=0 -> Stop,
    Stop -- h.k<n-1 | k:=k+1 -> Stop,
    Stop -- h.(k=n-1) | rxData:=r; rxErr:=p=0?0:1; rxRdy:=1 -> Repos;
  itrans: | rxRdy:=1 -> Repos;
  }

